{
	"using_namespace": {
		"prefix": "un",
		"body": [
			"using namespace $1std;",
			"$0"
		],
		"description": "using namespace ..."
	},
	"setmin": {
		"prefix": "setmin",
		"body": [
			"template <typename T> T &setmin(T &v, T op) { return v = min(v, op); }"
		]
	},
	"pbds": {
		"prefix": "pbds",
		"body": [
			"#include <ext/pb_ds/assoc_container.hpp>",
			"#include <ext/pb_ds/tree_policy.hpp>",
			"",
			"using namespace __gnu_pbds;",
			"",
			"template <typename T>",
			"using sset =",
			"    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;"
		]
	},
	"setmax": {
		"prefix": "setmax",
		"body": [
			"template <typename T> T &setmax(T &v, T op) { return v = max(v, op); }"
		]
	},
	"using_type": {
		"prefix": "u",
		"body": [
			"using $1 = $2;",
			"$0"
		],
		"description": "using ... = ..."
	},
	"pragmas": {
		"prefix": "pragma",
		"body": [
			"#pragma GCC optimize(\"O3,unroll-loops\")",
			"#pragma GCC target(\"avx2,popcnt,lzcnt,abm,bmi,fma,bmi2,tune=native\")"
		],
		"description": "pragma: target(...), optimize(...)"
	},
	"all": {
		"prefix": "all",
		"body": [
			"$1.begin(), $1.end()"
		],
		"description": "().begin(), ().end()"
	},
	"bits": {
		"prefix": "bits",
		"body": [
			"#include <bits/stdc++.h>",
			"$0"
		]
	},
	"include": {
		"prefix": "i",
		"body": [
			"#include <$0>"
		],
		"description": "#include <...>"
	},
	"include_vector": {
		"prefix": "iv",
		"body": [
			"#include <vector>",
			"$0"
		],
		"description": "#include <...>"
	},
	"include_iostream": {
		"prefix": "ii",
		"body": [
			"#include <iostream>",
			"$0"
		],
		"description": "#include <...>"
	},
	"include_algorithm": {
		"prefix": "ia",
		"body": [
			"#include <algorithm>",
			"$0"
		],
		"description": "#include <algorithm>"
	},
	"main": {
		"prefix": "main",
		"body": [
			"int main() {",
			"  $0",
			"}"
		]
	},
	"multitester": {
		"prefix": "tt",
		"body": [
			"int tt = 1;",
			"cin >> tt;",
			"while (tt--) {",
			"  solve();",
			"}"
		]
	},
	"ifdef": {
		"prefix": "ifdef",
		"body": [
			"#ifdef $1",
			"$0",
			"#endif"
		]
	},
	"ifndef": {
		"prefix": "ifndef",
		"body": [
			"#ifndef $1",
			"$0",
			"#endif"
		]
	},
	"solve": {
		"prefix": "solve",
		"body": [
			"void solve() {",
			"  $0",
			"}"
		]
	},
	"templ": {
		"prefix": "!",
		"body": [
			"// semenInRussia 2025",
			"#include <cstdint>",
			"#include <iostream>",
			"",
			"using namespace std;",
			"",
			"int main() {",
			"  int n;",
			"  cin >> n;",
			"  $0",
			"}"
		]
	},
	"tie": {
		"prefix": "tie",
		"body": [
			"cin.tie(nullptr)->sync_with_stdio(0);"
		]
	},
	"freopen": {
		"prefix": "freop",
		"body": [
			"freopen(\"$1.in\", \"r\", stdin);",
			"freopen(\"$1.out\", \"w\", stdout);$0"
		]
	},
	"cin": {
		"prefix": "ci",
		"body": [
			"cin >> $0;"
		]
	},
	"ll": {
		"prefix": "ll",
		"body": [
			"using ll = long long;"
		]
	},
	"pair<int, int>": {
		"prefix": "pii",
		"body": [
			"using pii = pair<int, int>;"
		]
	},
	"const int maxn": {
		"prefix": "maxn",
		"body": [
			"const int ${1:maxn} = $0;"
		]
	},
	"for": {
		"prefix": "for",
		"body": [
			"for (int ${1:i} = 0; $1 < ${2:n}; $1++) {",
			"  $0",
			"}"
		]
	},
	"stress": {
		"prefix": "stress",
		"body": [
			"// semenInRussia 2025",
			"// it's a file that stress testing your code, note that I consider your \"smart solution\"",
			"// have a type a.cpp and the stupid _a.cpp. And this file must be s_a.cpp",
			"// also this file generate tests",
			"",
			"#include <cstdint>",
			"#include <fstream>",
			"#include <iostream>",
			"",
			"using namespace std;",
			"",
			"void check() {",
			"  system(\"_${1:a}.exe < input.txt > output.txt\");",
			"  system(\"$1.exe < input.txt > actual.txt\");",
			"",
			"  if (system(\"fc actual.txt output.txt\")) {",
			"    cout << \"found!\";",
			"    exit(0);",
			"  }",
			"}",
			"",
			"int main() {",
			"  system(\"g++ $1.cpp -o $1.exe\");",
			"  system(\"g++ _$1.cpp -o _$1.exe\");",
			"",
			"  int n = 100;",
			"  for (int i = 1; i < n; i++) {",
			"    for (int j = 0; j < n; j++) {",
			"      // gen tests",
			"      ofstream input(\"input.txt\");",
			"      input << i << \" \" << j << endl;",
			"      input.flush();",
			"",
			"      check();",
			"    }",
			"  }",
			"",
			"  cout << \"ok!\";",
			"}"
		]
	},
	"mi": {
		"prefix": "mi",
		"body": [
			"",
			"struct mi {",
			"  int v;",
			"  mi(int64_t x = 0) : v(x % mod) { v += mod * (x < 0); }",
			"  explicit operator int() { return v; }",
			"};",
			"",
			"mi operator*(mi a, mi b) { return mi(1ll * a.v * b.v); }",
			"mi &operator*=(mi &a, mi b) { return a = a * b; }",
			"",
			"mi operator+(mi a, mi b) { return mi(1ll * a.v + b.v); }",
			"mi &operator+=(mi &a, mi b) { return a = a + b; }",
			"",
			"mi operator-(mi a, mi b) { return mi(a.v - b.v); }",
			"mi &operator-=(mi &a, mi b) { return a = a - b; }",
			"mi pow(mi x, int64_t k) {",
			"  mi ans = 1;",
			"  while (k) {",
			"    if (k & 1) {",
			"      ans *= x;",
			"    }",
			"    k >>= 1;",
			"    x *= x;",
			"  }",
			"  return ans;",
			"}",
			"",
			"mi inv(mi x) { return pow(x, mod - 2); }",
			"mi operator/(mi a, mi b) { return a * inv(b); }",
			"",
			"istream &operator>>(istream &in, mi &v) { return in >> v.v; }",
			"ostream &operator<<(ostream &out, mi v) { return out << v.v; }"
		]
	},
	"sparse": {
		"prefix": "sparse",
		"body": [
			"for (int k = 0; k + 1 < ${3:L}; k++) {",
			"  for (int i = 0; i + (2 << k) <= ${2:n}; i++) {",
			"    ${1:st}[k + 1][i] = ${4:min}($1[k][i], $1[k][i + (1 << k)]);",
			"  }",
			"}"
		]
	},
	"online_judge": {
		"prefix": "online",
		"body": [
			"#ifdef ONLINE_JUDGE",
			"$0",
			"#endif"
		]
	}
}
